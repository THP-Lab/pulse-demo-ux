---
description: 
globs: 
alwaysApply: false
---
# R√®gles Cursor pour la g√©n√©ration de t√¢ches - Projet Pulsy

## Contexte du projet
Pulsy est une application web interactive de type Tinder o√π les utilisateurs r√©pondent √† des questions de type r√©f√©rendum (pour/contre) en utilisant un syst√®me de cartes glissantes. L'application utilise un syst√®me de swipe pour recueillir les votes des utilisateurs.

## Stack technique actuelle
- **Frontend**: React 19 + TypeScript + Vite
- **Styling**: Tailwind CSS 4.1 + Radix UI
- **√âtat**: React hooks (useState, useEffect)
- **Composants**: Radix UI + Lucide React
- **Build**: Vite avec TypeScript strict
- **Linting**: ESLint avec r√®gles TypeScript

## R√®gles de g√©n√©ration de t√¢ches

### 1. Structure des t√¢ches
Chaque t√¢che doit inclure :
- **Titre** : Action claire et concise
- **Description** : Contexte et objectifs
- **Crit√®res d'acceptation** : Liste num√©rot√©e des fonctionnalit√©s attendues
- **Estimation** : Temps en heures (1-8h)
- **Priorit√©** : High/Medium/Low
- **Tags** : [UI], [API], [State], [Test], [Bug], [Feature]

### 2. Cat√©gories de t√¢ches

#### üé® Interface utilisateur (UI)
- Composants r√©utilisables (boutons, cartes, modales)
- Animations de swipe (like/dislike)
- Design responsive mobile-first avec Tailwind
- Th√®me et palette de couleurs coh√©rents
- Indicateurs visuels de progression

#### üîÑ Logique m√©tier (Business Logic)
- Gestion des questions et votes
- Syst√®me de progression
- Algorithme de navigation
- Gestion des r√©ponses utilisateur
- Statistiques et analytics

#### üìä Gestion d'√©tat (State Management)
- √âtat global de l'application
- Cache des questions et r√©ponses
- Synchronisation avec le backend (futur)
- Gestion des sessions utilisateur
- Persistance locale

#### üîå API et donn√©es (API & Data)
- Endpoints REST/GraphQL (futur)
- Mod√®les de donn√©es TypeScript
- Validation des donn√©es
- Gestion des erreurs
- Optimisation des requ√™tes

#### üé® Tests et qualit√© (Testing & Quality)
- Tests unitaires des composants
- Tests d'int√©gration des flux
- Tests E2E des parcours utilisateur
- Validation des performances
- Accessibilit√© (WCAG)

### 3. Conventions de nommage

#### Composants React
```typescript
// Composants de pr√©sentation
QuestionCard.tsx
ProgressBar.tsx
VoteButtons.tsx

// Composants de conteneur
QuestionContainer.tsx
VoteContainer.tsx

// Pages
HomePage.tsx
ResultsPage.tsx
```

#### Types TypeScript
```typescript
// Interfaces principales
interface Question {
  id: string;
  question: string;
  category: string;
}

interface UserVote {
  questionId: string;
  vote: 'like' | 'dislike' | 'idk';
  timestamp: Date;
}

interface AppData {
  questions: Question[];
}
```

#### Styles Tailwind
```css
/* Classes Tailwind avec BEM-like naming */
.question-card {}
.question-card__header {}
.question-card__content {}
.question-card--active {}

.vote-buttons {}
.vote-buttons__like {}
.vote-buttons__dislike {}
```

### 4. Patterns d'architecture

#### Structure des dossiers actuelle
```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/           # Composants Radix UI
‚îÇ   ‚îú‚îÄ‚îÄ QuestionCard.tsx # Carte principale
‚îÇ   ‚îî‚îÄ‚îÄ ProgressBar.tsx  # Barre de progression
‚îú‚îÄ‚îÄ types/            # Types TypeScript
‚îú‚îÄ‚îÄ lib/              # Utilitaires
‚îú‚îÄ‚îÄ assets/           # Ressources statiques
‚îî‚îÄ‚îÄ App.tsx           # Composant principal
```

#### Hooks personnalis√©s √† cr√©er
```typescript
// Exemples de hooks √† d√©velopper
useQuestions()
useVoting(questionId: string)
useProgress(currentIndex: number, total: number)
useSwipeGestures()
useLocalStorage(key: string)
```

### 5. Crit√®res de qualit√©

#### Performance
- Lazy loading des composants
- Optimisation des animations
- Debouncing des interactions
- Cache intelligent des donn√©es

#### Accessibilit√©
- Navigation au clavier
- Support des lecteurs d'√©cran
- Contraste des couleurs
- Textes alternatifs

#### UX/UI
- Feedback visuel imm√©diat
- √âtats de chargement
- Gestion des erreurs
- Animations fluides

### 6. Exemples de t√¢ches

#### T√¢che UI - Am√©lioration QuestionCard
**Titre**: Am√©liorer l'animation de swipe du QuestionCard
**Description**: Optimiser les animations de swipe pour une exp√©rience plus fluide
**Crit√®res d'acceptation**:
1. Animation de swipe plus fluide avec easing
2. Feedback visuel pendant le swipe
3. Support des gestes tactiles am√©lior√©
4. Performance optimis√©e sur mobile
5. Tests unitaires pour les animations
**Estimation**: 3h
**Priorit√©**: Medium
**Tags**: [UI], [Test]

#### T√¢che API - Service de questions
**Titre**: Cr√©er un service pour g√©rer les questions
**Description**: Extraire la logique de gestion des questions dans un service r√©utilisable
**Crit√®res d'acceptation**:
1. Service pour charger les questions depuis JSON
2. Gestion des erreurs et retry
3. Cache des donn√©es avec TTL
4. Types TypeScript pour les r√©ponses
5. Tests d'int√©gration
**Estimation**: 2h
**Priorit√©**: High
**Tags**: [API], [Test]

#### T√¢che State - Hook personnalis√© pour les votes
**Titre**: Cr√©er un hook useVoting pour g√©rer les votes
**Description**: Extraire la logique de vote dans un hook r√©utilisable
**Crit√®res d'acceptation**:
1. Hook useVoting avec gestion des votes
2. Persistance locale des votes
3. Validation des donn√©es
4. Gestion des erreurs
5. Tests unitaires du hook
**Estimation**: 2h
**Priorit√©**: High
**Tags**: [State], [Test]

### 7. Workflow de d√©veloppement

#### Branches Git
- `main` : Code de production
- `develop` : Branche de d√©veloppement
- `feature/task-name` : Nouvelles fonctionnalit√©s
- `bugfix/issue-description` : Corrections de bugs

#### Commits
```
feat: am√©liorer l'animation de swipe du QuestionCard
fix: corriger la gestion des votes sur mobile
refactor: extraire la logique de vote dans un hook
test: ajouter les tests pour useVoting hook
docs: mettre √† jour la documentation des composants
```

#### Code Review
- V√©rification des types TypeScript
- Tests unitaires pr√©sents
- Respect des conventions de nommage
- Performance et accessibilit√©
- Documentation des composants complexes

### 8. √âvolutions futures

#### Fonctionnalit√©s √† d√©velopper
- **Cat√©gories** : Organisation des questions par th√®me
- **Backend API** : Remplacement du JSON statique
- **Authentification** : Syst√®me de connexion
- **Statistiques** : R√©sultats et analytics
- **Admin Panel** : Gestion des questions

#### Am√©liorations techniques
- **State Management** : Zustand ou Redux Toolkit
- **Tests** : Vitest + React Testing Library
- **CI/CD** : GitHub Actions
- **Deployment** : Vercel/Netlify

### 9. T√¢ches prioritaires

#### T√¢ches High Priority
1. **Tests unitaires** : Ajouter Vitest et tests pour les composants
2. **Hook useVoting** : Extraire la logique de vote
3. **Service de questions** : Cr√©er un service r√©utilisable
4. **Gestion d'erreurs** : Am√©liorer la gestion des erreurs
5. **Accessibilit√©** : Am√©liorer l'accessibilit√© des composants

#### T√¢ches Medium Priority
1. **Animations** : Optimiser les animations de swipe
2. **Performance** : Optimiser le rendu des composants
3. **Responsive** : Am√©liorer l'adaptation mobile
4. **Documentation** : Documenter les composants
5. **CI/CD** : Mettre en place GitHub Actions

#### T√¢ches Low Priority
1. **Th√®me** : Syst√®me de th√®me sombre/clair
2. **Internationalisation** : Support multi-langues
3. **Analytics** : Int√©gration d'analytics
4. **PWA** : Transformer en Progressive Web App
5. **Offline** : Support hors ligne

### 10. M√©triques de qualit√©

#### M√©triques techniques
- Couverture de tests > 80%
- Performance Lighthouse > 90
- Accessibilit√© WCAG 2.1 AA
- Bundle size < 500KB

#### M√©triques produit
- Temps de chargement < 2s
- Taux d'erreur < 1%
- Taux de completion > 90%
- Satisfaction utilisateur > 4.5/5

